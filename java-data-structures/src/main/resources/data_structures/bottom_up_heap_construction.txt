
If we start with an initially empty heap, n successive calls to the insert 
operation will run in O(nlogn) time in the worst case. However, if all n 
key-value pairs to be stored in the heap are given in advance, such as 
during the first phase of the heap-sort algorithm, there is an alternative 
bottom-up construction method that runs in O(n) time.

For simplicity of exposition, we describe this bottom-up heap construction 
assuming the number of keys, n, is an integer such that n = 2^(h+1) − 1. 
That is, the heap is a complete binary tree with every level being full, so 
the heap has height h = log(n + 1) − 1. Viewed nonrecursively, bottom-up 
heap construction consists of the following h + 1 = log(n + 1) steps:

1. In the first step, we construct (n+1)/2 elementary heaps storing one entry each.
2. In the second step, we form (n+1)/4 heaps, each storing three entries, by joining 
pairs of elementary heaps and adding a new entry. The new entry is placed at the root 
and may have to be swapped with the entry stored at a child to preserve the heap-order 
property.
3. In the third step, we form (n+1)/8 heaps, each storing 7 entries, by joining pairs 
of 3-entry heaps (constructed in the previous step) and adding a new entry. The new 
entry is placed initially at the root, but may have to move down with a down-heap 
bubbling to preserve the heap-order property.
...
...
i. In the generic ith step, 2 ≤ i ≤ h, we form (n+1)/2^i heaps, each storing 2^i −1 
entries, by joining pairs of heaps storing (2^(i−1) − 1) entries (constructed in the 
previous step) and adding a new entry. The new entry is placed initially at the root, 
but may have to move down with a down-heap bubbling to preserve the heap-order property.
...
...
h+1. In the last step, we form the final heap, storing all the n entries, by joining 
two heaps storing (n − 1)/2 entries (constructed in the previous step) and adding a 
new entry. The new entry is placed initially at the root, but may have to move down 
with a down-heap bubbling to preserve the heap-order property.

Implementing a bottom-up heap construction is quite easy, given the existence of a 
“down-heap” utility method. The “merging” of two equally sized heaps that are subtrees 
of a common position p, as described in the opening of this section, can be accomplished 
simply by down-heaping p’s entry.

With our array-based representation of a heap, if we initially store all n entries 
in arbitrary order within the array, we can implement the bottom-up heap construction 
process with a single loop that makes a call to downheap from each position of the 
tree, as long as those calls are ordered starting with the deepest level and ending 
with the root of the tree. In fact, that loop can start with the deepest internal 
position, since there is no effect when down-heap is called at an external position.

Bottom-up heap construction is asymptotically faster than incrementally inserting 
n entries into an initially empty heap. Intuitively, we are performing a single 
down-heap operation at each position in the tree, rather than a single up-heap 
operation from each. Since more nodes are closer to the bottom of a tree than 
the top, the sum of the downward paths is linear, as shown in the following proposition.

Bottom-up construction of a heap with n entries takes O(n) time, assuming two keys can be compared in O(1) time.

Justification: The primary cost of the construction is due to the down-heap steps 
performed at each nonleaf position. Let πv denote the path of T from nonleaf node v 
to its “inorder successor” leaf, that is, the path that starts at v, goes to the 
right child of v, and then goes down leftward until it reaches a leaf. Although, 
πv is not necessarily the path followed by the down-heap bubbling step from v, 
its number of edges ∥πv∥ is proportional to the height of the subtree rooted at v, 
and thus a bound on the complexity of the down-heap operation at v. The total 
running time of the bottom-up heap construction algorithm is therefore bounded by 
the sum ∑ ∥πv∥.

We claim that the paths πv for all nonleaf v are edge-disjoint, and thus the sum 
of the path lengths is bounded by the number of total edges in the tree, hence O(n). 
To show this, we consider what we term “right-leaning” and “left-leaning” edges 
(i.e., those going from a parent to a right, respectively left, child). A particular 
right-leaning edge e can only be part of the path πv for node v that is the parent 
in the relationship represented by e. Left-leaning edges can be partitioned by 
considering the leaf that is reached if continuing down leftward until reaching a 
leaf. Each nonleaf node only uses left-leaning edges in the group leading to that 
nonleaf node’s inorder successor. Since each nonleaf node must have a different 
inorder successor, no two such paths can contain the same left-leaning edge. 
We conclude that the bottom-up construction of heap T takes O(n) time.

